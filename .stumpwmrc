 (in-package :stumpwm)

(setf *startup-message* nil)

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/stumpwm/stumpwm-contrib")))

;; Modules
(load-module "ttf-fonts")
(load-module "winner-mode")
(load-module "globalwindows")
(load-module "amixer")
(load-module "swm-gaps")
(load-module "kbd-layouts")



(setf swm-gaps:*inner-gaps-size* 10
      swm-gaps:*outer-gaps-size* 15)
(setf *normal-window-border* 0)

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 10
      *maxsize-border-width* 5
      *normal-border-width* 5
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 5
      *mouse-focus-policy* :click)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(set-fg-color "#eeeeee")
(set-bg-color "#1C2028")
(set-border-color "#232731")
(set-focus-color "#3B4252")
(set-unfocus-color "#232731")
(set-win-bg-color "#22272F")
(set-float-focus-color "#3B4252")
(set-float-unfocus-color "#232731")
;;(set-fg-color "#87FFFF")
;;(set-bg-color "#303030")
;;(set-border-color "#FF00FF")
;;(set-focus-color "#AFFFFF")
;;(set-unfocus-color "#FF00FF")
;;(set-win-bg-color "#303030")
;;(set-float-focus-color "#AFFFFF")
;;(set-float-unfocus-color "#FF00FF")

(setf *mode-line-background-color* "#eeeeee")
(setf *mode-line-foreground-color* "#1C2028")
(setf *screen-mode-line-format* "[%n] %w^> %d")

(setf *colors* (list "#1C2028"      ; 0 black
                     "#BF616A"      ; 1 red
                     "#A3BE8C"      ; 2 green
                     "#EBCB8B"      ; 3 yellow
                     "#5E81AC"      ; 4 blue
                     "#B48EAD"      ; 5 magenta
                     "#87FFFF"      ; 6 cyan
                     "#FFFFFF"))    ; 7 white

(defun shift-windows-forward (frames win)
  "Exchange windows through cycling frames."
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (stumpwm::frame-window frame))
      (when win
        (stumpwm::pull-window win frame)))))

(defun polybar-groups ()
  "Return string representation for polybar stumpgroups module"
  (apply #'concatenate 'string
         (mapcar
          (lambda (g)
            (let* ((name (string-upcase (group-name g)))
                   (n-win (write-to-string (length (group-windows g))))
                   (display-text (cond ((string-equal name "TXT") "   TXT ")
                                       ((string-equal name "WEB") "   WEB ")
                                       ((string-equal name "EXT") "   EXT ")
                                       ((string-equal name "FLT") "   FLT ")
                                       (t (concat "   " name "  ")))))
              (if (eq g (current-group))
                  (concat "%{F#ECEFF4 B#882E3440 u#8A9899 +u}" display-text "[" n-win "] " "%{F- B- u- -u}")
                  (concat "%{F#8A9899}" display-text "[" n-win "] " "%{F-}"))))
          (sort (screen-groups (current-screen)) #'< :key #'group-number))))

(defun window-cls-present-p (win-cls &optional all-groups)
  "Tell if a window (by class) is present"
  (let ((windows (group-windows (if all-groups (current-screen) (current-group)))))
    (member win-cls (mapcar #'window-class windows) :test #'string-equal)))

(defun run-or-raise-prefer-group (cmd win-cls)
  "If there are windows in the same class, cycle in those. Otherwise call
run-or-raise with group search t."
  (if (window-cls-present-p win-cls)
      (run-or-raise cmd `(:class ,win-cls) nil T)
      (run-or-raise cmd `(:class ,win-cls) T T)))

;; Commands
(defcommand run-or-raise-firefox () ()
  (run-or-raise-prefer-group "firefox" "Firefox"))

(defcommand run-or-raise-urxvt () ()
  (run-or-raise-prefer-group "URxvt" "URxvt"))

(defcommand run-urxvt () ()
  (run-shell-command "urxvt"))


(run-shell-command "compton")



(defun rofi (mode)
  (run-shell-command (concat "rofi -show " mode " -m " (write-to-string (head-number (current-head))))))

(defcommand rofi-run () () (rofi "run -sidebar-mode"))
(defcommand rofi-window () () (rofi "window"))
(defcommand rofi-windowcd () () (rofi "windowcd"))

(define-key *root-map* (kbd "C-f") "run-or-raise-firefox")
(define-key *root-map* (kbd "M-r") "rofi-run")
(define-key *root-map* (kbd "M-w") "rofi-window")
(define-key *root-map* (kbd "c")   "run-urxvt")
(define-key *root-map* (kbd "C-c") "run-urxvt")
(define-key *root-map* (kbd "u")   "run-urxvt")

(swm-gaps::toggle-gaps)
(mode-line)
